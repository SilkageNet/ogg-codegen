// Code generated by ogg-codegen. DO NOT EDIT.
package swagger

import (
	"errors"
	"github.com/gin-gonic/gin/render"
	"github.com/pinealctx/neptune/tex"
)

var (
	_ = errors.New
	_ render.Render
	_ tex.JsInt64
)

// LoginResult 登录结果
type LoginResult struct {
	// 用户登录态；当调用需登录的接口时，HTTP Header里需添加 `Authentication -> token`。
	Token string `json:"token,omitempty"`
	// 用户基本信息
	User *User `json:"user,omitempty"`
	// 新用户初次登录
	New bool `json:"new,omitempty"`
}

func (t *LoginResult) Valid() error {
	var err error
	if t.User != nil && t.User.Valid() != nil {
		return errors.New("user.is.nil")
	}
	return err
}

// Response 基础响应结构体
type Response struct {
	// 用于标识请求状态：
	// - 2000: 请求成功
	// - 4000: 请求失败；该错误客户端直接根据 `errMsg` 显示相应提示信息。
	//   - 4001: 未登录/登录已过期，需跳转至登录页。
	//   - 4xxx: 本类错误码有其特定含义，客户端根据实际情况处理。
	//
	// - 5000: 服务器异常；该错误统一显示为 `服务端异常`。
	Code int32 `json:"code"`
	// 响应描述
	ErrMsg string `json:"errMsg,omitempty"`
}

func (t *Response) Valid() error {
	var err error
	if t.Code == 0 {
		return errors.New("code.is.zero")
	}
	return err
}

// Test aaaa
type Test string

func (t *Test) Valid() error {
	var err error

	return err
}

// UploadResult 上传结果
type UploadResult struct {
	// 文件ID
	Id string `json:"id,omitempty"`
	// 文件URL
	Url string `json:"url,omitempty"`
}

func (t *UploadResult) Valid() error {
	var err error

	return err
}

// User 用户基本信息
type User struct {
	// 用户ID
	Id int32 `json:"id,omitempty"`
	// AccessHash
	AccessHash tex.JsInt64 `json:"access_hash,omitempty"`
	// 用户昵称，默认会创建随机昵称。
	Nickname string `json:"nickname,omitempty"`
	// 用户头像，用户未设置头像时会有默认头像。
	Avatar string `json:"avatar,omitempty"`
	// 地区码
	AreaCode string `json:"area_code,omitempty"`
	// 手机号
	Phone string `json:"phone,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 微信
	Wechat string `json:"wechat,omitempty"`
	// 是否可以被发起会话
	CanChat bool `json:"can_chat,omitempty"`
	// 用户状态
	State UserState `json:"state,omitempty"`
}

func (t *User) Valid() error {
	var err error

	return err
}
